{"version":3,"sources":["../5e83341aaa4417e26a44.worker.js","../webpack/bootstrap 5e83341aaa4417e26a44","../node_modules/babel-runtime/regenerator/index.js","worker/index.js","../node_modules/regenerator-runtime/runtime-module.js","../node_modules/regenerator-runtime/runtime.js","../../dist/initialize.js","../../node_modules/regenerator-runtime/runtime-module.js","../../node_modules/regenerator-runtime/runtime.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","this","chunkIds","moreModules","length","installedChunks","pop","1","e","chunkId","Promise","resolve","importScripts","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","_asyncToGenerator","fn","gen","apply","arguments","reject","step","key","arg","info","value","error","done","then","err","getPhotos","getUsers","getPostsofUser","getCommentofPost","getPost","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default","__WEBPACK_IMPORTED_MODULE_1_offload_dist_initialize__","__WEBPACK_IMPORTED_MODULE_1_offload_dist_initialize___default","_ref","a","mark","_callee","wrap","_context","prev","next","fetch","sent","json","abrupt","stop","_ref2","_callee2","_context2","_ref3","_callee3","userID","_context3","_x","_ref4","_callee4","postID","_context4","_x2","_ref5","_callee5","id","_ref6","dynamicImport","_context5","bind","_x3","g","Function","hadRuntime","regeneratorRuntime","getOwnPropertyNames","indexOf","oldRuntime","undefined","global","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","makeInvokeMethod","tryCatch","obj","type","GeneratorFunction","GeneratorFunctionPrototype","defineIteratorMethods","forEach","method","AsyncIterator","invoke","record","result","hasOwn","__await","unwrapped","enqueue","callInvokeWithMethodAndArg","previousPromise","state","GenStateSuspendedStart","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","_sent","dispatchException","GenStateSuspendedYield","iterator","return","TypeError","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","values","iterable","iteratorMethod","iteratorSymbol","isNaN","Op","$Symbol","Symbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","runtime","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","constructor","displayName","isGeneratorFunction","genFun","ctor","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","reverse","skipTempReset","charAt","slice","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","initialize","entries","slicedToArray","userDefined","onmessage","asyncToGenerator","_e$data","UID","action","payload","data","ON_NEW_TASK","execute","_x4","sliceIterator","arr","_arr","_n","_d","_e","_s","_i","Array","isArray","func","postMessage","t0","console","message"],"mappings":"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","file":"5e83341aaa4417e26a44.worker.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \tthis[\"webpackChunk\"] = function webpackChunkCallback(chunkIds, moreModules) {\n/******/ \t\tfor(var moduleId in moreModules) {\n/******/ \t\t\tmodules[moduleId] = moreModules[moduleId];\n/******/ \t\t}\n/******/ \t\twhile(chunkIds.length)\n/******/ \t\t\tinstalledChunks[chunkIds.pop()] = 1;\n/******/ \t};\n/******/\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// object to store loaded chunks\n/******/ \t// \"1\" means \"already loaded\"\n/******/ \tvar installedChunks = {\n/******/ \t\t1: 1\n/******/ \t};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/ \t// This file contains only the entry chunk.\n/******/ \t// The chunk loading function for additional chunks\n/******/ \t__webpack_require__.e = function requireEnsure(chunkId) {\n/******/ \t\treturn new Promise(function(resolve) {\n/******/ \t\t\t// \"1\" is the signal for \"already loaded\"\n/******/ \t\t\tif(!installedChunks[chunkId]) {\n/******/ \t\t\t\timportScripts(\"\" + chunkId + \".\" + \"5e83341aaa4417e26a44\" + \".worker.js\");\n/******/ \t\t\t}\n/******/ \t\t\tresolve();\n/******/ \t\t});\n/******/ \t};\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/offload/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(2);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPhotos\", function() { return getPhotos; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getUsers\", function() { return getUsers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPostsofUser\", function() { return getPostsofUser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getCommentofPost\", function() { return getCommentofPost; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPost\", function() { return getPost; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_offload_dist_initialize__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_offload_dist_initialize___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_offload_dist_initialize__);\nfunction _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return;}if(info.done){resolve(value);}else{return Promise.resolve(value).then(function(value){step(\"next\",value);},function(err){step(\"throw\",err);});}}return step(\"next\");});};}var getPhotos=function(){var _ref=_asyncToGenerator(/*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee(){return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch('https://jsonplaceholder.typicode.com/photos');case 2:_context.next=4;return _context.sent.json();case 4:return _context.abrupt('return',_context.sent);case 5:case'end':return _context.stop();}}},_callee,this);}));return function getPhotos(){return _ref.apply(this,arguments);};}();var getUsers=function(){var _ref2=_asyncToGenerator(/*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee2(){return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetch('https://jsonplaceholder.typicode.com/users');case 2:_context2.next=4;return _context2.sent.json();case 4:return _context2.abrupt('return',_context2.sent);case 5:case'end':return _context2.stop();}}},_callee2,this);}));return function getUsers(){return _ref2.apply(this,arguments);};}();var getPostsofUser=function(){var _ref3=_asyncToGenerator(/*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee3(userID){return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return fetch('https://jsonplaceholder.typicode.com/posts?userId='+userID);case 2:_context3.next=4;return _context3.sent.json();case 4:return _context3.abrupt('return',_context3.sent);case 5:case'end':return _context3.stop();}}},_callee3,this);}));return function getPostsofUser(_x){return _ref3.apply(this,arguments);};}();var getCommentofPost=function(){var _ref4=_asyncToGenerator(/*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee4(postID){return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return fetch('https://jsonplaceholder.typicode.com/comments?postId='+postID);case 2:_context4.next=4;return _context4.sent.json();case 4:return _context4.abrupt('return',_context4.sent);case 5:case'end':return _context4.stop();}}},_callee4,this);}));return function getCommentofPost(_x2){return _ref4.apply(this,arguments);};}();var getPost=function(){var _ref5=_asyncToGenerator(/*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(function _callee5(id){var _ref6,dynamicImport;return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return __webpack_require__.e/* import() */(0).then(__webpack_require__.bind(null, 7));case 2:_ref6=_context5.sent;dynamicImport=_ref6.dynamicImport;_context5.next=6;return dynamicImport(id);case 6:return _context5.abrupt('return',_context5.sent);case 7:case'end':return _context5.stop();}}},_callee5,this);}));return function getPost(_x3){return _ref5.apply(this,arguments);};}();__WEBPACK_IMPORTED_MODULE_1_offload_dist_initialize___default()(this);\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() { return this })() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(3);\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar regeneratorRuntime = __webpack_require__(5);\n\nvar ON_NEW_TASK = 'NEW_TASK';\nvar ON_TASK_UPDATE = 'TASK_UPDATE';\nvar ON_TASK_DONE = 'TASK_DONE';\nvar ON_TASK_ERROR = 'TASK_ERROR';\n\nvar asyncToGenerator = function (fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step(\"next\", value);\n          }, function (err) {\n            step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar execute = function () {\n\tvar _ref = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(func, UID, payload) {\n\t\tvar result;\n\t\treturn regeneratorRuntime.wrap(function _callee$(_context) {\n\t\t\twhile (1) {\n\t\t\t\tswitch (_context.prev = _context.next) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\t_context.prev = 0;\n\n\t\t\t\t\t\t//console.log(`starting ${UID}`);\n\t\t\t\t\t\tresult = func(payload, function (data) {\n\t\t\t\t\t\t\treturn self.postMessage({\n\t\t\t\t\t\t\t\tUID: UID,\n\t\t\t\t\t\t\t\taction: ON_TASK_UPDATE,\n\t\t\t\t\t\t\t\tpayload: data\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (!(result instanceof Promise)) {\n\t\t\t\t\t\t\t_context.next = 6;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_context.next = 5;\n\t\t\t\t\t\treturn result;\n\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tresult = _context.sent;\n\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\tself.postMessage({ UID: UID, action: ON_TASK_DONE, payload: result });\n\t\t\t\t\t\t//console.log(`done ${UID}`);\n\t\t\t\t\t\t_context.next = 13;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 9:\n\t\t\t\t\t\t_context.prev = 9;\n\t\t\t\t\t\t_context.t0 = _context[\"catch\"](0);\n\n\t\t\t\t\t\tconsole.error(_context.t0);\n\t\t\t\t\t\tself.postMessage({ UID: UID, action: ON_TASK_ERROR, error: _context.t0.message });\n\n\t\t\t\t\tcase 13:\n\t\t\t\t\tcase \"end\":\n\t\t\t\t\t\treturn _context.stop();\n\t\t\t\t}\n\t\t\t}\n\t\t}, _callee, this, [[0, 9]]);\n\t}));\n\n\treturn function execute(_x, _x2, _x3) {\n\t\treturn _ref.apply(this, arguments);\n\t};\n}();\n\nself.userDefined = {};\n\nfunction initialize(context) {\n\tif (!context) throw new Error('no functions exported in worker file');\n\tObject.entries(context).forEach(function (_ref2) {\n\t\tvar _ref3 = slicedToArray(_ref2, 2),\n\t\t    key = _ref3[0],\n\t\t    value = _ref3[1];\n\n\t\treturn value instanceof Function && (self.userDefined[key] = value);\n\t});\n\tself.onmessage = function () {\n\t\tvar _ref4 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(e) {\n\t\t\tvar _e$data, UID, method, action, payload;\n\n\t\t\treturn regeneratorRuntime.wrap(function _callee2$(_context2) {\n\t\t\t\twhile (1) {\n\t\t\t\t\tswitch (_context2.prev = _context2.next) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t_e$data = e.data, UID = _e$data.UID, method = _e$data.method, action = _e$data.action, payload = _e$data.payload;\n\n\t\t\t\t\t\t\tif (self.userDefined.hasOwnProperty(method)) {\n\t\t\t\t\t\t\t\t_context2.next = 3;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthrow new Error(method + \" is either not defined or exported\");\n\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\tif (!(action === ON_NEW_TASK)) {\n\t\t\t\t\t\t\t\t_context2.next = 6;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_context2.next = 6;\n\t\t\t\t\t\t\treturn execute(self.userDefined[method], UID, payload);\n\n\t\t\t\t\t\tcase 6:\n\t\t\t\t\t\tcase \"end\":\n\t\t\t\t\t\t\treturn _context2.stop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, _callee2, this);\n\t\t}));\n\n\t\treturn function (_x4) {\n\t\t\treturn _ref4.apply(this, arguments);\n\t\t};\n\t}();\n}\n\nmodule.exports = initialize;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() { return this })() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(6);\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// 5e83341aaa4417e26a44.worker.js"," \tthis[\"webpackChunk\"] = function webpackChunkCallback(chunkIds, moreModules) {\n \t\tfor(var moduleId in moreModules) {\n \t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t}\n \t\twhile(chunkIds.length)\n \t\t\tinstalledChunks[chunkIds.pop()] = 1;\n \t};\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded chunks\n \t// \"1\" means \"already loaded\"\n \tvar installedChunks = {\n \t\t1: 1\n \t};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\treturn new Promise(function(resolve) {\n \t\t\t// \"1\" is the signal for \"already loaded\"\n \t\t\tif(!installedChunks[chunkId]) {\n \t\t\t\timportScripts(\"\" + chunkId + \".\" + \"5e83341aaa4417e26a44\" + \".worker.js\");\n \t\t\t}\n \t\t\tresolve();\n \t\t});\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/offload/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5e83341aaa4417e26a44","module.exports = require(\"regenerator-runtime\");\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/regenerator/index.js\n// module id = 0\n// module chunks = 1","import initialize from 'offload/dist/initialize';\r\n\r\nexport async function getPhotos() {\r\n\treturn await (await fetch('https://jsonplaceholder.typicode.com/photos')).json()\r\n}\r\n\r\nexport async function getUsers() {\r\n\treturn await (await fetch('https://jsonplaceholder.typicode.com/users')).json()\r\n}\r\n\r\nexport async function getPostsofUser(userID) {\r\n\treturn await (await fetch(`https://jsonplaceholder.typicode.com/posts?userId=${userID}`)).json();\r\n}\r\n\r\nexport async function getCommentofPost(postID) {\r\n\treturn await (await fetch(`https://jsonplaceholder.typicode.com/comments?postId=${postID}`)).json();\r\n}\r\n\r\nexport async function getPost(id) {\r\n\tlet {dynamicImport} = await import('./dynamic');\r\n\treturn await dynamicImport(id);\r\n}\r\n\r\ninitialize(this);\n\n\n// WEBPACK FOOTER //\n// ./src/worker/index.js","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() { return this })() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/regenerator-runtime/runtime-module.js\n// module id = 2\n// module chunks = 1","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/regenerator-runtime/runtime.js\n// module id = 3\n// module chunks = 1","'use strict';\n\nvar regeneratorRuntime = require('regenerator-runtime');\n\nvar ON_NEW_TASK = 'NEW_TASK';\nvar ON_TASK_UPDATE = 'TASK_UPDATE';\nvar ON_TASK_DONE = 'TASK_DONE';\nvar ON_TASK_ERROR = 'TASK_ERROR';\n\nvar asyncToGenerator = function (fn) {\n  return function () {\n    var gen = fn.apply(this, arguments);\n    return new Promise(function (resolve, reject) {\n      function step(key, arg) {\n        try {\n          var info = gen[key](arg);\n          var value = info.value;\n        } catch (error) {\n          reject(error);\n          return;\n        }\n\n        if (info.done) {\n          resolve(value);\n        } else {\n          return Promise.resolve(value).then(function (value) {\n            step(\"next\", value);\n          }, function (err) {\n            step(\"throw\", err);\n          });\n        }\n      }\n\n      return step(\"next\");\n    });\n  };\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar execute = function () {\n\tvar _ref = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(func, UID, payload) {\n\t\tvar result;\n\t\treturn regeneratorRuntime.wrap(function _callee$(_context) {\n\t\t\twhile (1) {\n\t\t\t\tswitch (_context.prev = _context.next) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\t_context.prev = 0;\n\n\t\t\t\t\t\t//console.log(`starting ${UID}`);\n\t\t\t\t\t\tresult = func(payload, function (data) {\n\t\t\t\t\t\t\treturn self.postMessage({\n\t\t\t\t\t\t\t\tUID: UID,\n\t\t\t\t\t\t\t\taction: ON_TASK_UPDATE,\n\t\t\t\t\t\t\t\tpayload: data\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (!(result instanceof Promise)) {\n\t\t\t\t\t\t\t_context.next = 6;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_context.next = 5;\n\t\t\t\t\t\treturn result;\n\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tresult = _context.sent;\n\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\tself.postMessage({ UID: UID, action: ON_TASK_DONE, payload: result });\n\t\t\t\t\t\t//console.log(`done ${UID}`);\n\t\t\t\t\t\t_context.next = 13;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 9:\n\t\t\t\t\t\t_context.prev = 9;\n\t\t\t\t\t\t_context.t0 = _context[\"catch\"](0);\n\n\t\t\t\t\t\tconsole.error(_context.t0);\n\t\t\t\t\t\tself.postMessage({ UID: UID, action: ON_TASK_ERROR, error: _context.t0.message });\n\n\t\t\t\t\tcase 13:\n\t\t\t\t\tcase \"end\":\n\t\t\t\t\t\treturn _context.stop();\n\t\t\t\t}\n\t\t\t}\n\t\t}, _callee, this, [[0, 9]]);\n\t}));\n\n\treturn function execute(_x, _x2, _x3) {\n\t\treturn _ref.apply(this, arguments);\n\t};\n}();\n\nself.userDefined = {};\n\nfunction initialize(context) {\n\tif (!context) throw new Error('no functions exported in worker file');\n\tObject.entries(context).forEach(function (_ref2) {\n\t\tvar _ref3 = slicedToArray(_ref2, 2),\n\t\t    key = _ref3[0],\n\t\t    value = _ref3[1];\n\n\t\treturn value instanceof Function && (self.userDefined[key] = value);\n\t});\n\tself.onmessage = function () {\n\t\tvar _ref4 = asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(e) {\n\t\t\tvar _e$data, UID, method, action, payload;\n\n\t\t\treturn regeneratorRuntime.wrap(function _callee2$(_context2) {\n\t\t\t\twhile (1) {\n\t\t\t\t\tswitch (_context2.prev = _context2.next) {\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t_e$data = e.data, UID = _e$data.UID, method = _e$data.method, action = _e$data.action, payload = _e$data.payload;\n\n\t\t\t\t\t\t\tif (self.userDefined.hasOwnProperty(method)) {\n\t\t\t\t\t\t\t\t_context2.next = 3;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthrow new Error(method + \" is either not defined or exported\");\n\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\tif (!(action === ON_NEW_TASK)) {\n\t\t\t\t\t\t\t\t_context2.next = 6;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_context2.next = 6;\n\t\t\t\t\t\t\treturn execute(self.userDefined[method], UID, payload);\n\n\t\t\t\t\t\tcase 6:\n\t\t\t\t\t\tcase \"end\":\n\t\t\t\t\t\t\treturn _context2.stop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, _callee2, this);\n\t\t}));\n\n\t\treturn function (_x4) {\n\t\t\treturn _ref4.apply(this, arguments);\n\t\t};\n\t}();\n}\n\nmodule.exports = initialize;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../dist/initialize.js\n// module id = 4\n// module chunks = 1","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() { return this })() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/regenerator-runtime/runtime-module.js\n// module id = 5\n// module chunks = 1","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/regenerator-runtime/runtime.js\n// module id = 6\n// module chunks = 1"],"sourceRoot":""}